
======HCAN Protokoll Referenz======

**ACHTUNG: Diese Datei wird automatisch generiert! Aenderungen gehen
verloren!**

		
======HMS - HCAN Management Service (1)======
		
**PING_REQUEST (1)**

Zum Testen, ob ein Geraet auf diese Adresse horcht
\\ 

**PING_REPLAY (2)**

Anwort des Geraetes
\\ 

**DEVICE_STATE_REQUEST (3)**

Fragt ein Geraet nach seinem aktuellen Zustand
\\ 

**DEVICE_STATE_REPLAY (4)**

Liefert den aktuellen Zustand zurueck
^Parameter^Beschreibung^
|state|0 = booting, 1 = Bootloader, 2 = Application|
\\ 

**DEVICE_RESET (5)**

Loest einen Watchdog Reset aus
\\ 

**DEVICE_BOOT_STOP (6)**

stoppt den Bootvorgang; Geraet geht in den Bootloader-State
\\ 

**DEVICE_BOOT_STOP_ACK (7)**

Wenn Bootvorgang gestoppt, sendet das Geraet diese Bestaetigung
\\ 

**DEVICE_LOAD_APP (8)**

Laed die Applikation, sofern das Geraet im Bootloader State ist
\\ 

**DEVICE_TYPE_REQUEST (9)**

Fragt den Geraetetyp ab
\\ 

**DEVICE_TYPE_REPLAY (10)**

Liefert den Geraete-Typ
^Parameter^Beschreibung^
|arch|0 = Atmega8 1 = Atmega32|
|type|Hardware-Board-Typ|
\\ 

**FLASH_BUFFER_FILL (16)**

Sendet 4 Bytes zum Geraet. Details stehen in der Dokumentation zum Flashen
^Parameter^Beschreibung^
|index|definiert die Position von d[0] im Zielbuffer auf dem Device|
|d0|Databyte|
|d1|Databyte|
|d2|Databyte|
|d3|Databyte|
\\ 

**FLASH_BUFFER_FILL_ACK (17)**

Geraet bestaetigt damit den Erhalt einer Zeile
\\ 

**FLASH_BUFFER_WRITE (18)**

Geraet schreibt den Puffer an die gegebene Adresse in das Flash
^Parameter^Beschreibung^
|addr_lsb|LSB der Adresse im Flash|
|addr_msb|MSB der Adresse im Flash|
\\ 

**FLASH_BUFFER_WRITE_ACK (19)**

Geraet bestaetigt das Schreiben
\\ 

**INTERNAL_EEPROM_WRITE (20)**

Beschreibt eine Speicherzelle des internen EEPROMs (ohne Pruefung!)
^Parameter^Beschreibung^
|addr_lsb|LSB der Adresse im EEPROM|
|addr_msb|MSB der Adresse im EEPROM|
|value|der zu schreibende Wert|
\\ 

**INTERNAL_EEPROM_WRITE_ACK (21)**

Geraet bestaetigt das Schreiben (ohne Pruefung!)
\\ 

**INTERNAL_EEPROM_READ_REQUEST (22)**

Leseanforderung fuer eine Speicherzelle des internen EEPROMs
^Parameter^Beschreibung^
|addr_lsb|LSB der Adresse im EEPROM|
|addr_msb|MSB der Adresse im EEPROM|
\\ 

**INTERNAL_EEPROM_READ_REPLAY (23)**

Geraet sendet den gelesenen Wert
^Parameter^Beschreibung^
|value|der Wert aus dem EEPROM|
\\ 

**INTERNAL_EEPROM_READ_BULK_REQUEST (24)**

Leseanforderung fuer eine Speicherzelle des internen EEPROMs, Bulkversion
^Parameter^Beschreibung^
|addr_lsb|LSB der Adresse im EEPROM|
|addr_msb|MSB der Adresse im EEPROM|
\\ 

**INTERNAL_EEPROM_READ_BULK_REPLAY (25)**

Geraet sendet 6 gelesene Bytes (Bulk) ab addr_msb:addr_lsb
^Parameter^Beschreibung^
|d0|Byte an Offset 0|
|d1|Byte an Offset 1|
|d2|Byte an Offset 2|
|d3|Byte an Offset 3|
|d4|Byte an Offset 4|
|d5|Byte an Offset 5|
\\ 

**UPTIME_QUERY (30)**

Abfrage der Uptime. Das ist die vergangene Zeit seit dem letzten Reboot/Reset
\\ 

**UPTIME_REPLAY (31)**

Geraet sendet die Uptime als 32Bit Wert in Sekunden
^Parameter^Beschreibung^
|u3|MSB der 32 Bit Uptime|
|u2||
|u1||
|u0|LSB der 32 Bit Uptime|
\\ 

**SYSLOG_LEVEL_SET (32)**

Setzt den Debug-Level fuer die Syslog Botschaften
^Parameter^Beschreibung^
|level| 1 = CRITICAL, 2 = ERROR, 3 = WARNING, 4 = DEBUG |
\\ 

**BUILD_VERSION_QUERY (33)**

Fragt nach der Build Version
\\ 

**BUILD_VERSION_REPLAY (34)**

Liefert die Build Version
^Parameter^Beschreibung^
|hi|Build Nummer, Hi Teil|
|lo|Build Nummer, Lo Teil|
\\ 

**CAN_EC_QUERY (35)**

Fragt nach den CAN Error Counter Staenden
\\ 

**CAN_EC_REPLAY (36)**

Liefert die CAN Error Counter Staende
^Parameter^Beschreibung^
|REC|RX Error Counter|
|TEC|TX Error Counter|
\\ 

**FLASH_CRC16_QUERY (37)**

Errechnet die CRC16 Pruefsumme ueber den Flash bis zur angegebenen Adresse
^Parameter^Beschreibung^
|hi|Adresse hi|
|lo|Adresse lo|
\\ 

**FLASH_CRC16_REPLAY (38)**

Liefert die errechnete CRC16 Pruefsumme ueber den Flash
^Parameter^Beschreibung^
|hi|CRC16 hi|
|lo|CRC16 lo|
\\ 

**LOOP_THROUGHPUT_QUERY (39)**

Fragt nach der Anzahl der Schleifen/sec
\\ 

**LOOP_THROUGHPUT_REPLAY (40)**

Liefert die Anzahl der Schleifen/sec
^Parameter^Beschreibung^
|hi|MSB|
|lo|LSB|
\\ 

**RX_RECEIVED_QUERY (41)**

Fragt nach der Anzahl der bisher empfangenen Frames
\\ 

**RX_RECEIVED_REPLAY (42)**

Liefert die Anzahl der bisher empfangenen Frames (32bit)
^Parameter^Beschreibung^
|d0|MSB|
|d1||
|d2||
|d3|LSB|
\\ 

**RX_LOST_QUERY (43)**

Fragt nach der Anzahl der bisher verlorenen Frames
\\ 

**RX_LOST_REPLAY (44)**

Liefert die Anzahl der bisher verlorenen Frames (32bit)
^Parameter^Beschreibung^
|d0|MSB|
|d1||
|d2||
|d3|LSB|
\\ 

**TX_SENT_QUERY (45)**

Fragt nach der Anzahl der bisher gesendeten Frames
\\ 

**TX_SENT_REPLAY (46)**

Liefert die Anzahl der bisher gesendeten Frames (32bit)
^Parameter^Beschreibung^
|d0|MSB|
|d1||
|d2||
|d3|LSB|
\\ 

**TX_DROPPED_QUERY (47)**

Fragt nach der Anzahl der bisher verworfenen Frames
\\ 

**TX_DROPPED_REPLAY (48)**

Liefert die Anzahl der bisher verworfenen Frames (32bit)
^Parameter^Beschreibung^
|d0|MSB|
|d1||
|d2||
|d3|LSB|
\\ 

**RX_TX_STATS_RESET (49)**

Setzt alle RX/TX Stats Counter zurueck
\\ 

======SLS - Syslog Service (4)======
		
**BOOT_RESETFLAG_LOG (1)**

Meldet den Wert des Resetflag-Registers direkt nach dem Booten1: Power-on Reset 2: External Reset 4: Brown-Out Reset 8: Watchdog Reset
^Parameter^Beschreibung^
|flag|siehe Atmega8 Referenz-Handbuch, S.39|
\\ 

**FIRMWARE_CRC16_ERROR (2)**

Meldet eine fehlerhafte CRC16 Firmware Pruefsumme
\\ 

**FIRMWARE_CONFIG_COMPAT_ERROR (3)**

Firmware und Config sind nicht kompatibel
^Parameter^Beschreibung^
|eds_block_type|betroffener EDS Block-Typ|
|eds_addr_hi|EDS Adresse Hi|
|eds_addr_lo|EDS Adresse Lo|
|size_in_config|Groesse im EDS|
|size_in_firmware|Groesse in der Firmware|
\\ 

**DUMP_DEBUG_INFO (4)**

Geraet spuckt Debug-Infos aus
^Parameter^Beschreibung^
|context||
\\ 

======HES - Haus-Elektrik Service (5)======
		
**TASTER_DOWN (1)**

Sendet ein Taster beim Druecken; Power-Ports reagieren mit Toggle (an -> aus, aus -> an)
^Parameter^Beschreibung^
|gruppe|Taster-Gruppe, auf die der Taster konfiguriert ist|
|index|Index des Taster-Ports; nur noetig fuer Logging-Zwecke, falls Gruppe nicht eindeutig|
\\ 

**TASTER_UP (2)**

Sendet ein Taster beim Druecken; Power-Ports reagieren mit Toggle (an -> aus, aus -> an)
^Parameter^Beschreibung^
|gruppe|Taster-Gruppe|
|index|Index des Taster-Ports|
\\ 

**POWER_GROUP_ON (10)**

Reaktion: Power-Port(s) schalten sich an
^Parameter^Beschreibung^
|gruppe|Gruppe|
\\ 

**POWER_GROUP_OFF (11)**

Power-Port(s) schalten sich aus
^Parameter^Beschreibung^
|gruppe|Gruppe|
\\ 

**POWER_GROUP_STATE_QUERY (12)**

Abfrage des Status eines oder mehrerer Power-Ports (ob an oder aus)
^Parameter^Beschreibung^
|gruppe|Gruppe|
\\ 

**POWER_GROUP_STATE_REPLAY (13)**

Antwort eines Power-Ports mit dem aktuellen Status
^Parameter^Beschreibung^
|gruppe|Gruppe|
|status|1 = an, 0 = aus|
\\ 

**POWER_GROUP_TIMER_QUERY (14)**

Anfrage an eine Lichtzone o.ae. nach der Timer Stand 
^Parameter^Beschreibung^
|gruppe|Gruppe|
\\ 

**POWER_GROUP_TIMER_REPLAY (15)**

Antwort einer Lichtzone mit dem Timer Stand 
^Parameter^Beschreibung^
|gruppe|Gruppe|
|timer_hi|Timer-Stand, High Byte|
|timer_lo|Timer-Stand, Low Byte|
\\ 

**POWER_GROUP_SET_TIMER (16)**

Setzt den aktuellen Timer-Stand einer Lichtzone
^Parameter^Beschreibung^
|gruppe|Gruppe|
|timer_hi|Timer-Stand, High Byte|
|timer_lo|Timer-Stand, Low Byte|
\\ 

**POWER_GROUP_STATE_INFO (17)**

Power-Port meldet nach Aenderung seinen Status
^Parameter^Beschreibung^
|gruppe|Gruppe|
|status|1 = an, 0 = aus|
\\ 

**ROLLADEN_POSITION_SET (20)**

Faehrt einen Rolladen auf die gegebene Position
^Parameter^Beschreibung^
|gruppe|Gruppe|
|position|Position im Bereich [0..100]; 100% = oben|
\\ 

**ROLLADEN_POSITION_REQUEST (21)**

Fragt einen Rolladen nach der aktuellen Position
^Parameter^Beschreibung^
|gruppe|Gruppe|
\\ 

**ROLLADEN_POSITION_REPLAY (22)**

Der Rolladen antwortet mit der aktuellen Position
^Parameter^Beschreibung^
|gruppe|Gruppe|
|position|Position im Bereich [0..100]; 100% = oben|
\\ 

**ROLLADEN_DEFINE_POSITION (23)**

Definiert die aktuelle Position eines Rolladen (!)
^Parameter^Beschreibung^
|gruppe|Gruppe|
|position|Position im Bereich [0..100]; 100% = oben|
\\ 

**ROLLADEN_POSITION_CHANGED_INFO (24)**

Besagt, dass sich die Rolladen-Position geaendert hat
^Parameter^Beschreibung^
|gruppe|Gruppe|
|position|Position im Bereich [0..100]; 100% = oben|
|cmdsrc_hi|Source-Adresse des Befehls (0 = manuell ueber Taster), MSB|
|cmdsrc_lo|LSB|
\\ 

**1WIRE_DISCOVER (30)**

Veranlasst einen 1Wire Scan an gebenen Pin
^Parameter^Beschreibung^
|pin|Pin ID des 1Wire Ports im Bereich [0..7]|
\\ 

**1WIRE_DISCOVERED_PART_1 (31)**

ein 1Wire Device ist gefunden worden, Message Teil 1
^Parameter^Beschreibung^
|id0|1. Byte der 1Wire id[8] (Checksum dabei)|
|id1|2. Byte|
|id2|3. Byte|
|id3|4. Byte|
\\ 

**1WIRE_DISCOVERED_PART_2 (32)**

ein 1Wire Device ist gefunden worden, Message Teil 1
^Parameter^Beschreibung^
|id4|5. Byte der 1Wire id[8] (Checksum dabei)|
|id5|6. Byte|
|id6|7. Byte|
|id7|8. Byte|
\\ 

**1WIRE_ERROR (33)**

ein 1Wire Fehler trat auf
^Parameter^Beschreibung^
|error|3 = NoSensorFound, 4 = BusError|
\\ 

**1WIRE_TEMPERATURE (34)**

Messergebnis (Fixed Point) eines DS18B20 1Wire Temperaturfuehlers
^Parameter^Beschreibung^
|gruppe|Gruppe|
|temp_hi|MSB|
|temp_lo|LSB; 4 LSB sind Nachkommabits|
\\ 

**1WIRE_TEMPERATURE_QUERY (35)**

fragt einen Temperatursensor nach der aktuellen Temperatur
^Parameter^Beschreibung^
|gruppe|Gruppe|
\\ 

**1WIRE_TEMPERATURE_REPLAY (36)**

Messergebnis (Fixed Point) eines DS18B20 1Wire Temperaturfuehlers als Antwort auf 1WIRE_TEMPERATURE_QUERY
^Parameter^Beschreibung^
|gruppe|Gruppe|
|temp_hi|MSB|
|temp_lo|LSB; 4 LSB sind Nachkommabits|
\\ 

**REEDKONTAKT_OFFEN (40)**

Meldung fuer einen offenen Reedkontakt an Fenster oder Tuer
^Parameter^Beschreibung^
|gruppe|Gruppe|
\\ 

**REEDKONTAKT_STATE_QUERY (41)**

Fragt nach dem Status eines Reedkontakts
^Parameter^Beschreibung^
|gruppe|Gruppe|
\\ 

**REEDKONTAKT_STATE_REPLAY (42)**

Status Antwort eines Reedkontakts
^Parameter^Beschreibung^
|gruppe|Gruppe|
|state|Zustand: 0 = zu, 1 = offen|
\\ 

**REEDKONTAKT_STATE_CHANGE (43)**

Zustandsaenderung eines Reedkontakts
^Parameter^Beschreibung^
|gruppe|Gruppe|
|state|Zustand: 0 = zu, 1 = offen|
\\ 

**PVSENSOR_STATE_REQUEST (44)**

Zustandsaenderung eines PV Sensors
^Parameter^Beschreibung^
|gruppe|Gruppe|
\\ 

**PVSENSOR_STATE_REPLAY (45)**

Zustandsaenderung eines PV Sensors
^Parameter^Beschreibung^
|gruppe|Gruppe|
|state|Zustand: 0 = 0V, 1 = 230V|
\\ 

**PVSENSOR_STATE_CHANGE_INFO (46)**

Zustandsaenderung eines PV Sensors
^Parameter^Beschreibung^
|gruppe|Gruppe|
|state|Zustand: 0 = 0V, 1 = 230V|
\\ 

**HEIZUNG_DETAILS_REQUEST (50)**

UserPanel fragt nach Heizungsdetails
^Parameter^Beschreibung^
|id|Heizungs-ID|
\\ 

**HEIZUNG_MODE_OFF_DETAILS (51)**

Heizung ist aus (Off-Mode)
^Parameter^Beschreibung^
|id|Heizungs-ID|
\\ 

**HEIZUNG_SET_MODE_OFF (52)**

Heizung schaltet aus
^Parameter^Beschreibung^
|id|Heizungs-ID|
\\ 

**HEIZUNG_MODE_MANUAL_DETAILS (53)**

Manueller Modus incl Parameter
^Parameter^Beschreibung^
|id|Heizungs-ID|
|rate|Heiz-Rate|
|duration_hi|Restdauer (MSB), 0 = unbegrenzt|
|duration_lo|Restdauer (LSB)|
\\ 

**HEIZUNG_SET_MODE_MANUAL (54)**

Manueller Modus incl Parameter
^Parameter^Beschreibung^
|id|Heizungs-ID|
|rate|Heiz-Rate|
|duration_hi|Restdauer (MSB), 0 = unbegrenzt|
|duration_lo|Restdauer (LSB)|
\\ 

**HEIZUNG_MODE_THERMOSTAT_DETAILS (55)**

Thermostat Modus incl Parameter
^Parameter^Beschreibung^
|id|Heizungs-ID|
|temp_hi|Soll-Temperatur (MSB)|
|temp_lo|Soll-Temperatur (LSB)|
|duration_hi|Restdauer (MSB), 0 = unbegrenzt|
|duration_lo|Restdauer (LSB)|
\\ 

**HEIZUNG_SET_MODE_THERMOSTAT_DETAILS (56)**

Set Thermostat Modus incl Parameter
^Parameter^Beschreibung^
|id|Heizungs-ID|
|temp_hi|Soll-Temperatur (MSB)|
|temp_lo|Soll-Temperatur (LSB)|
|duration_hi|Restdauer (MSB), 0 = unbegrenzt|
|duration_lo|Restdauer (LSB)|
\\ 

**HEIZUNG_MODE_AUTOMATIK_DETAILS (57)**

Automatik Modus incl Parameter
^Parameter^Beschreibung^
|id|Heizungs-ID|
|temp_hi|Soll-Temperatur (MSB)|
|temp_lo|Soll-Temperatur (LSB)|
|timerange_id|Zeitbereichs-ID|
\\ 

**HEIZUNG_SET_MODE_AUTOMATIK (58)**

Set Automatik Modus
^Parameter^Beschreibung^
|id|Heizungs-ID|
\\ 

**HEIZUNG_TIST_REQUEST (59)**

UserPanel fragt nach T(ist)
^Parameter^Beschreibung^
|id|Heizungs-ID|
\\ 

**HEIZUNG_TIST_REPLAY (60)**

Controllerboard liefert T(ist)
^Parameter^Beschreibung^
|id|Heizungs-ID|
|temp_hi|Ist-Temperatur (MSB)|
|temp_lo|Ist-Temperatur (LSB)|
\\ 

**HEIZUNG_WAERMEBEDARF_INFO (61)**

Heizung braucht Waerme oder nicht
^Parameter^Beschreibung^
|id|Heizungs-ID|
|value|[0..100]: 0 = kein Bedarf|
\\ 

**HEIZSTEUERUNG_STATE_REQUEST (62)**

Fragt die Heizungssteuerung nach ihrem Stand
\\ 

**HEIZSTEUERUNG_STATE_REPLAY (63)**

die (einzige) Heizungssteuerung antwortet
^Parameter^Beschreibung^
|VL_soll|Vorlauf-Soll|
|VL_ist|Vorlauf-Ist|
|RL_ist|Ruecklauf-Ist|
|BF|Brennerfreigabe|
\\ 

**HEIZSTEUERUNG_STATE_INFO (64)**

Heizungssteuerung liefert den aktuellen Status
^Parameter^Beschreibung^
|VL_soll|Vorlauf-Soll|
|GWB_hi|Gesamt-Waermebedarf|
|GWB_lo|Gesamt-Waermebedarf|
|BF|Brennerfreigabe|
\\ 

**HEIZSTEUERUNG_SET_VL (65)**

gibt die Soll-VL Temperatur vor
^Parameter^Beschreibung^
|VL_soll|Vorlauf-Soll|
\\ 

**HEIZUNG_SOLLTEMP_LINE_REQUEST (66)**

Fragt nach einer Solltemp/Zeitzonen Config Zeile
^Parameter^Beschreibung^
|id|Heizungs-ID|
|idx|Index der Config Zeile [0..7]|
\\ 

**HEIZUNG_SOLLTEMP_LINE_REPLAY (67)**

Controllerboard liefert Zeile
^Parameter^Beschreibung^
|id|Heizungs-ID|
|idx|Index der Config Zeile|
|temp_hi|Soll-Temperatur (MSB)|
|temp_lo|Soll-Temperatur (LSB)|
|zeitzone_id|ID der Zeitzone|
\\ 

**HEIZUNG_SOLLTEMP_WRITE_LINE (68)**

schreibt neue Solltemp Zeile: ACHTUNG: zeitzone_id wird bisher NICHT geschrieben!
^Parameter^Beschreibung^
|id|Heizungs-ID|
|idx|Index der Config Zeile|
|temp_hi|Soll-Temperatur (MSB)|
|temp_lo|Soll-Temperatur (LSB)|
|zeitzone_id|ID der Zeitzone|
\\ 

**HEIZUNG_SOLLTEMP_WRITE_LINE_ACK (69)**

schreibt neue Solltemp Zeile
^Parameter^Beschreibung^
|id|Heizungs-ID|
|idx|Index der Config Zeile|
\\ 

**WECKER_SET (72)**

Wecker incl Parameter
^Parameter^Beschreibung^
|id|Wecker-ID|
|duration_hi|Timer in x Sekunden (MSB)|
|duration_lo|Timer in x Sekunden (LSB)|
\\ 

**WECKER_DETAILS_REQUEST (73)**

Wecker incl Parameter
^Parameter^Beschreibung^
|id|Wecker-ID|
\\ 

**WECKER_DETAILS (74)**

Wecker incl Parameter
^Parameter^Beschreibung^
|id|Wecker-ID|
|duration_hi|Timer in x Sekunden (MSB)|
|duration_lo|Timer in x Sekunden (LSB)|
\\ 

**HELLIGKEITS_INFO (71)**

Liefert die Helligkeit am ADC (Aufloesung: 10Bit)
^Parameter^Beschreibung^
|guppe|Helligkeits-Gruppe|
|brightness_hi|hi byte der Helligkeit|
|brightness_lo|lo hyte der Helligkeit|
\\ 

**POTI_POS_CHANGED (70)**

Liefert die Position des Potis (Aufloesung: 10Bit)
^Parameter^Beschreibung^
|guppe|Poti-Gruppe|
|pos_hi|hi byte der Position|
|pos_lo|lo hyte der Position|
\\ 

**CONFIG_RELOAD (100)**

Reaktion: Controllerboard laed die Config aus dem EEPROM neu
\\ 

**CONFIG_RAM_USAGE_REQUEST (101)**

Fragt ab, wieviel bytes des Config RAM verwendet werden
\\ 

**CONFIG_RAM_USAGE_REPLAY (102)**

Liefert die Anzahl der verwendeten Bytes im Config RAM
^Parameter^Beschreibung^
|usage_hi|MSB des RAM Usage|
|usage_lo|LSB des RAM Usage|
\\ 

**ZEITZONE_DETAILS_REQUEST (110)**

Fragt nach den Zeitzonen-Details
^Parameter^Beschreibung^
|gruppe|Zeitzonen-ID|
\\ 

**ZEITZONE_DETAILS_REPLAY (111)**

Liefert die Zeitzonen Details
^Parameter^Beschreibung^
|gruppe|Zeitzonen-ID|
|day_pattern|Binaeres Day Pattern|
|from_hour||
|from_minute||
|to_hour||
|to_minute||
\\ 

**ZEITZONE_WRITE_DETAILS (112)**

Liefert neue Zeitzonen Details, welche im EEPROM gespeichert werden
^Parameter^Beschreibung^
|gruppe|Zeitzonen-ID|
|day_pattern|Binaeres Day Pattern|
|from_hour||
|from_minute||
|to_hour||
|to_minute||
\\ 

**ZEITZONE_WRITE_DETAILS_ACK (113)**

Liefert ein ACK auf den Schreibvorgang
^Parameter^Beschreibung^
|gruppe|Zeitzonen-ID|
\\ 

**ZEITZONE_TEST_MATCH_REQUERST (114)**

Testet, ob die Zeitzone matched, d.h. zutrifft
^Parameter^Beschreibung^
|gruppe|Zeitzonen-ID|
\\ 

**ZEITZONE_TEST_MATCH_REPLAY (115)**

Liefert die Info, ob die Zeitzone matched
^Parameter^Beschreibung^
|gruppe|Zeitzonen-ID|
|match|0 = false, 1 = true|
\\ 

======RTS - Real Time Service (6)======
		
**TIME_INFO (1)**

Meldet die aktuelle Zeit
^Parameter^Beschreibung^
|level|Time Level; regelt den Master-/Slave Betrieb|
|day_of_week|Tag der Woche: [1..7] == [ Montag .. Sonntag ]|
|hour|Stunde [0..23]|
|minute|Minute [0..59]|
|second|Sekunde [0..59]|
\\ 

**DATE_INFO (2)**

Meldet das aktuelle Datum
^Parameter^Beschreibung^
|level|Date Level; regelt den Master-/Slave Betrieb|
|day_of_month|Tag des Monats [1..31] |
|month_of_year|Monat [1..12] |
|year|Jahr 2000 + [1..255] = [ 2001..2255 ]|
\\ 

**TIME_REQUEST (3)**

Fragt die aktuelle Zeit: Replay ist TIME_INFO
\\ 

**DATE_REQUEST (4)**

Fragt das aktuelle Datum: Replay ist DATE_INFO
\\ 

======EDS - EEPROM Data System Service (7)======
		
**GET_NEXT_BLOCK (1)**

Fragt nach dem naechsten Block
^Parameter^Beschreibung^
|handle_hi|Iterator, hi byte|
|handle_lo|Iterator, lo byte|
\\ 

**GET_NEXT_BLOCK_REPLAY (2)**

Liefert den naechsten Block
^Parameter^Beschreibung^
|handle_hi|Iterator, hi byte|
|handle_lo|Iterator, lo byte|
|type|Typ des Blocks|
|size|Groesse des Blocks|
\\ 

**DEFRAGMENT (3)**

Fasst alle freien Bloecke zusammen
\\ 

**ALLOCATE_BLOCK (4)**

Alloziert einen Block
^Parameter^Beschreibung^
|type|Typ des Blocks|
|size|Groesse des Blocks|
\\ 

**ALLOCATE_BLOCK_REPLAY (5)**

Liefert ein Handle auf den allozierten Block, oder 0, falls fehlgeschlagen
^Parameter^Beschreibung^
|handle_hi|hi byte|
|handle_lo|lo byte|
\\ 

**FREE_BLOCK (6)**

Gibt einen Block frei
^Parameter^Beschreibung^
|handle_hi|hi byte|
|handle_lo|lo byte|
\\ 

**FREE_BLOCK_REPLAY (7)**

Gibt einen Block frei
^Parameter^Beschreibung^
|result|0 = ok, 1 = error|
\\ 

**READ_FROM_BLOCK (8)**

Fordert 4 Bytes aus einem Block an
^Parameter^Beschreibung^
|handle_hi|hi byte|
|handle_lo|lo byte|
|index|lo byte|
\\ 

**READ_FROM_BLOCK_REPLAY (9)**

Liefert 4 Bytes aus einem Block an
^Parameter^Beschreibung^
|d0|Byte 0|
|d1|Byte 1|
|d2|Byte 2|
|d3|Byte 3|
\\ 

**WRITE_TO_BLOCK (10)**

Schreibt ein Byte in einem Block
^Parameter^Beschreibung^
|handle_hi|hi byte|
|handle_lo|lo byte|
|index|lo byte|
|d0|Byte|
\\ 

**WRITE_TO_BLOCK_REPLAY (11)**

Anwort auf ein geschriebenes Byte
\\ 

**FORMAT (12)**

Formatiert den EDS Bereich des EEPROM
\\ 

======USVS - USV Service (8)======
		
**STATE_REQUEST (1)**

Fragt den aktuellen USV Zustand
\\ 

**STATE_INFO (2)**

Meldet den aktuellen USV Zustand
^Parameter^Beschreibung^
|state|0 = Netzbetrieb, 1 = Batterie|
\\ 

**VOLTAGE_REQUEST (3)**

Fragt nach einer USV Spannung
^Parameter^Beschreibung^
|Ux|1-5|
\\ 

**VOLTAGE_REPLAY (4)**

Meldet die USV Spannung
^Parameter^Beschreibung^
|Ux_hi|hi teil|
|Ux_lo|lo teil|
\\ 

**VOLTAGE_STATS_REQUEST (5)**

Fragt nach den Spannungs-Statistiken
^Parameter^Beschreibung^
|Ux|1-5|
\\ 

**VOLTAGE_STATS_REPLAY (6)**

Fragt nach den Spannungs-Statistiken
^Parameter^Beschreibung^
|U|1-5|
|min_hi|Minimum|
|min_lo|Minimum|
|max_hi|Maximum|
|max_lo|Maximum|
\\ 

**VOLTAGE_STATS_RESET (7)**

Setzt alle Spannungs-Statistiken zurueck
\\ 

======EBUS - eBus Telegramme (9)======
		
**FA_BLOCK1_INFO (1)**

Feuerungsautomat Block 1
^Parameter^Beschreibung^
|status|LSB bis MSB: LDW,GDW,WS,Flamme,Ventil1,Ventil2,UWP,Alarm|
|stellgrad|0-100%|
|KT|0-100 Grad, (DATA1c)|
|RT|0-100 Grad|
|BT|0-100 Grad|
|AT|-30-50 Grad (SIGN CHAR)|
\\ 

**REGLER_DATEN_INFO_FRG1 (2)**

Regler Daten an FA Fragment 1
^Parameter^Beschreibung^
|status|Waermeanforderung (s.S.24)|
|aktion|Ein/Ausschalten etc. (s.S.24)|
|kesseltemp_soll_lo|Grad, DATA2c, lo Byte|
|kesseltemp_soll_hi|Grad, DATA2c, hi Byte|
|kesseldr_soll_lo|bar, DATA2b, lo Byte|
|kesseldr_soll_hi|bar, DATA2b, hi Byte|
\\ 

**REGLER_DATEN_INFO_FRG2 (3)**

Regler Daten an FA Fragment 2
^Parameter^Beschreibung^
|stellgrad|Modulationsgrad|
|ww_soll|Brauchwasser-Sollwert|
|brennstoff|00=?, 01=Gas, 10=Oel, 11=?|
\\ 

======WS - Wetter Service (10)======
		
**WETTER_INFO (1)**

Wetterdaten
^Parameter^Beschreibung^
|niederschlag|1 = Niederschlag|
|wind|Impulse pro sec|
|licht_ost|Sonne/Helligkeit|
|licht_sued|Sonne/Helligkeit|
|licht_west|Sonne/Helligkeit|
\\ 

**LICHT_STATS_5MIN (2)**

Licht, ueber 5min gemittelt
^Parameter^Beschreibung^
|licht_ost|Helligkeit|
|licht_sued|Helligkeit|
|licht_west|Helligkeit|
\\ 

**WIND_STATS_5MIN (3)**

Wind, ueber 5min gemittelt
^Parameter^Beschreibung^
|wind|Impulse pro sec|
\\ 

======OAPS - Object Access Protocol Service (11)======
		
**OBJECT_COUNT_REQUEST (1)**

Fragt nach der Anzahl der Objekte
\\ 

**OBJECT_COUNT_REPLAY (2)**

Anzahl der Objekte
^Parameter^Beschreibung^
|count|Anzahl der Objekte|
\\ 

**OBJECT_ATTRIBUTE_REQUEST (3)**

Anfrage der Attribute eines Objekts
^Parameter^Beschreibung^
|oid|Objekt ID|
\\ 

**OBJECT_ATTRIBUTE_REPLAY (4)**

Attribute eines Knotens
^Parameter^Beschreibung^
|oid|Objekt ID|
|oclass|Klasse des Objekts|
|p1|opt. Parameter|
|p2|opt. Parameter|
|p3|opt. Parameter|
|p4|opt. Parameter|
\\ 

**FIELD_COUNT_REQUEST (5)**

Fragt nach der Anzahl der Felder eines Objekts
^Parameter^Beschreibung^
|oid|Objekt ID|
\\ 

**FIELD_COUNT_REPLAY (6)**

Anzahl der Objekte
^Parameter^Beschreibung^
|oid|Objekt ID|
|count|Anzahl der Felder|
\\ 

**FIELD_ATTRIBUTE_REQUEST (7)**

Anfrage der Attribute eines Feldes
^Parameter^Beschreibung^
|oid|Objekt ID|
|fid|Field ID|
\\ 

**FIELD_ATTRIBUTE_REPLAY (8)**

Attribute eines Feldes
^Parameter^Beschreibung^
|oid|Objekt ID|
|fid|Field ID|
|fclass|Variablen-Typ bzw. Klasse des Feldes|
|flags|bit0 = rw, bit1 = persistent, bit2 = array|
|arraysize||
\\ 

**FIELD_READ_REQUEST (9)**

Fragt nach dem aktuellen Wert des Feldes
^Parameter^Beschreibung^
|oid|Objekt ID|
|fid|Field ID|
|idx|opt. Array Index|
\\ 

**FIELD_READ_REPLAY (10)**

Liefert den Wert des Feldes
^Parameter^Beschreibung^
|oid|Objekt ID|
|fid|Field ID|
|idx|opt. Array Index|
|value_hi||
|value_lo||
\\ 

**FIELD_WRITE_REQUEST (11)**


^Parameter^Beschreibung^
|oid|Objekt ID|
|fid|Field ID|
|idx|opt. Array Index|
|value_hi||
|value_lo||
\\ 

**FIELD_WRITE_REPLAY (12)**


^Parameter^Beschreibung^
|oid|Objekt ID|
|fid|Field ID|
|idx|opt. Array Index|
\\ 
